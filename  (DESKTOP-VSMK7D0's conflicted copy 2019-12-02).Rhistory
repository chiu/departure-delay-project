knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
attach(mtcars)
plot(wt, mpg)
library(nycflights13)
library(Hmisc)
set.seed(42)
original_data <- read_csv("fltrain.csv.gz")
DF <- original_data
DF[sapply(DF, is.character)] <- lapply(DF[sapply(DF, is.character)],
as.factor)
DF$flight <- as.factor(DF$flight)
str(DF)
library(lubridate)
DF$sched_arr_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_arr_time), 4, pad="0"),format="%H%M")
DF$sched_arr_time_hour <- hour(DF$sched_arr_time_posix)
DF$sched_arr_time_minute <- minute(DF$sched_arr_time_posix)
#num minute is number of minutes since start of day for scheduled arrival time
DF$sched_arr_time_num_minute <- 60*DF$sched_arr_time_hour + DF$sched_arr_time_minute
DF$sched_dep_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_dep_time),4 , pad="0"),format="%H%M")
DF$sched_dep_time_hour <- hour(DF$sched_dep_time_posix)
DF$sched_dep_time_minute <- minute(DF$sched_dep_time_posix)
#num minute is number of minutes since start of day for scheduled depival time
DF$sched_dep_time_num_minute <- 60*DF$sched_dep_time_hour + DF$sched_dep_time_minute
select(original_data, time_hour, sched_dep_time, sched_arr_time, tz, tzone)
select(DF, sched_arr_time, sched_arr_time_hour)
DF$sched_air_time <- DF$sched_arr_time_posix - DF$sched_dep_time_posix
drops <- c('sched_arr_time_posix', 'sched_arr_time_hour', 'sched_dep_time_posix', 'sched_dep_time_hour', 'sched_dep_time', 'sched_arr_time', 'hour', 'time', 'minute', 'time_hour' )
DF <- DF[ , !(names(DF) %in% drops)]
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
DF <- DF[ , !(names(DF) %in% drops)]
DF
## Remove columns with more than 50% NA
DF <- DF[, -which(colMeans(is.na(DF)) > 0.5)]
DF$sched_air_time <- as.numeric(DF$sched_air_time)
library(imputeMissings)
impute_model <- imputeMissings::compute(DF, method="median/mode")
impute_model
DF <- impute(DF, object=impute_model, flag=TRUE)
DF <- DF[!duplicated(as.list(DF))]  #remove all redundant flag columns that are identical to each other.
numeric_only_df <- dplyr::select_if(DF, is.numeric)
library(corrplot)
corrplot(cor(numeric_only_df), type = 'lower')
dep_delay_vec <- DF$dep_delay
DF$dep_delay <- NULL
head(DF)
library(dplyr)
DF <- DF %>% mutate_if(is.numeric, scale)
head(DF)
DF$dep_delay <- dep_delay_vec
DF<-DF[DF$dep_delay < 30,]
set.seed(42)
DF$flight <- NULL
train_index <- sample(1:nrow(DF),size=2*nrow(DF)/3,replace=FALSE)
train_df <- DF[train_index,]
test_df <- DF[-train_index,]
rmse = mean((test_df$dep_delay-0)^2) %>% sqrt()
rmse
rmse = mean((test_df$dep_delay-mean(train_df$dep_delay))^2)%>% sqrt()
rmse
rmse = mean((test_df$dep_delay-median(train_df$dep_delay))^2)%>% sqrt()
rmse
model <- lm(dep_delay ~ ., data=train_df)
model_without_dep <-  lm(dep_delay ~ .-dest, data=train_df)
anova(model, model_without_dep)
summary <- round(summary(model)$coefficients,6)
sorteddf <- summary[order(summary[,ncol(summary)]),]
head(sorteddf)
head(sorteddf)
lm_test_df <- test_df
in_test_but_not_train <- setdiff(unique(lm_test_df$model), unique(train_df$model))
lm_test_df <- lm_test_df[ !lm_test_df$model %in% in_test_but_not_train, ]
in_test_but_not_train <- setdiff(unique(lm_test_df$dest), unique(train_df$dest))
lm_test_df <- lm_test_df[ !lm_test_df$dest %in% in_test_but_not_train, ]
preds = predict(model, newdata=lm_test_df)
rmse = sqrt(mean((lm_test_df$dep_delay - preds)^2))
rmse
set.seed(42)
library(gbm)
model <- gbm(dep_delay ~ ., data=train_df,
n.trees=1000, shrinkage=0.003) # default shrinkage = 0.1
preds = predict(model, newdata=test_df, n.trees=1000)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
summary(model)
model <- gbm(dep_delay ~ ., data=train_df,
n.trees=1000, shrinkage=0.01) # default shrinkage = 0.1
preds = predict(model, newdata=test_df, n.trees=1000)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
summary(model)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
gbm_benchmark<-read_csv('shrinkage_0point01_numtrees_32_to_16384_gbm_benchmark.csv')
gbm_benchmark
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
attach(mtcars)
plot(wt, mpg)
library(nycflights13)
library(Hmisc)
set.seed(42)
original_data <- read_csv("fltrain.csv.gz")
DF <- original_data
DF[sapply(DF, is.character)] <- lapply(DF[sapply(DF, is.character)],
as.factor)
DF$flight <- as.factor(DF$flight)
str(DF)
library(lubridate)
DF$sched_arr_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_arr_time), 4, pad="0"),format="%H%M")
DF$sched_arr_time_hour <- hour(DF$sched_arr_time_posix)
DF$sched_arr_time_minute <- minute(DF$sched_arr_time_posix)
#num minute is number of minutes since start of day for scheduled arrival time
DF$sched_arr_time_num_minute <- 60*DF$sched_arr_time_hour + DF$sched_arr_time_minute
DF$sched_dep_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_dep_time),4 , pad="0"),format="%H%M")
DF$sched_dep_time_hour <- hour(DF$sched_dep_time_posix)
DF$sched_dep_time_minute <- minute(DF$sched_dep_time_posix)
#num minute is number of minutes since start of day for scheduled depival time
DF$sched_dep_time_num_minute <- 60*DF$sched_dep_time_hour + DF$sched_dep_time_minute
select(original_data, time_hour, sched_dep_time, sched_arr_time, tz, tzone)
select(DF, sched_arr_time, sched_arr_time_hour)
DF$sched_air_time <- DF$sched_arr_time_posix - DF$sched_dep_time_posix
drops <- c('sched_arr_time_posix', 'sched_arr_time_hour', 'sched_dep_time_posix', 'sched_dep_time_hour', 'sched_dep_time', 'sched_arr_time', 'hour', 'time', 'minute', 'time_hour' )
DF <- DF[ , !(names(DF) %in% drops)]
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
DF <- DF[ , !(names(DF) %in% drops)]
DF
## Remove columns with more than 50% NA
DF <- DF[, -which(colMeans(is.na(DF)) > 0.5)]
DF$sched_air_time <- as.numeric(DF$sched_air_time)
library(imputeMissings)
impute_model <- imputeMissings::compute(DF, method="median/mode")
impute_model
DF <- impute(DF, object=impute_model, flag=TRUE)
DF <- DF[!duplicated(as.list(DF))]  #remove all redundant flag columns that are identical to each other.
numeric_only_df <- dplyr::select_if(DF, is.numeric)
library(corrplot)
corrplot(cor(numeric_only_df), type = 'lower')
dep_delay_vec <- DF$dep_delay
DF$dep_delay <- NULL
head(DF)
library(dplyr)
DF <- DF %>% mutate_if(is.numeric, scale)
head(DF)
DF$dep_delay <- dep_delay_vec
DF<-DF[DF$dep_delay < 30,]
set.seed(42)
DF$flight <- NULL
train_index <- sample(1:nrow(DF),size=2*nrow(DF)/3,replace=FALSE)
train_df <- DF[train_index,]
test_df <- DF[-train_index,]
rmse = mean((test_df$dep_delay-0)^2) %>% sqrt()
rmse
rmse = mean((test_df$dep_delay-mean(train_df$dep_delay))^2)%>% sqrt()
rmse
rmse = mean((test_df$dep_delay-median(train_df$dep_delay))^2)%>% sqrt()
rmse
model <- lm(dep_delay ~ ., data=train_df)
model_without_dep <-  lm(dep_delay ~ .-dest, data=train_df)
anova(model, model_without_dep)
summary <- round(summary(model)$coefficients,6)
sorteddf <- summary[order(summary[,ncol(summary)]),]
head(sorteddf)
head(sorteddf)
lm_test_df <- test_df
in_test_but_not_train <- setdiff(unique(lm_test_df$model), unique(train_df$model))
lm_test_df <- lm_test_df[ !lm_test_df$model %in% in_test_but_not_train, ]
in_test_but_not_train <- setdiff(unique(lm_test_df$dest), unique(train_df$dest))
lm_test_df <- lm_test_df[ !lm_test_df$dest %in% in_test_but_not_train, ]
preds = predict(model, newdata=lm_test_df)
rmse = sqrt(mean((lm_test_df$dep_delay - preds)^2))
rmse
set.seed(42)
library(gbm)
model <- gbm(dep_delay ~ ., data=train_df,
n.trees=1000, shrinkage=0.003) # default shrinkage = 0.1
preds = predict(model, newdata=test_df, n.trees=1000)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
summary(model)
model <- gbm(dep_delay ~ ., data=train_df,
n.trees=1000, shrinkage=0.01) # default shrinkage = 0.1
preds = predict(model, newdata=test_df, n.trees=1000)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
summary(model)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
set.seed(42)
x <- 2^seq(5,14, by=1)
rmse_vec <- numeric(length(x))
count <- 1
for (val in x) {
hboost <- gbm(
dep_delay ~ .,
data = train_df,
n.trees = val,
distribution = 'gaussian',
shrinkage = 0.001
)
preds = predict(hboost, n.trees = val, newdata = test_df)
mse = mean((test_df$dep_delay - preds) ^ 2)
rmse <- sqrt(mse)
rmse_vec[count] <- rmse
print(val)
print(rmse)
count = count + 1
}
plot(x, rmse_vec)
summary(hboost)
class(summary(hboost))
summary <- summary(hboost)
write.csv(summary,'0point001_16384trees_gbm.csv')
gbm_benchmark<-read_csv('shrinkage_0point01_numtrees_32_to_16384_gbm_benchmark.csv')
gbm_benchmark
library(EZtune)
response <- DF$dep_delay
eztune_df <- DF
eztune_df$dep_delay <- NULL
eztune_obj <- eztune(eztune_df, response, method = "gbm", optimizer = "hjn", fast = TRUE,
cross = NULL)
eztune_obj
sqrt(70)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
summary(hboost)
gbm_benchmark2 <- data.frame("num_trees"=x, "rmse"=rmse_vec)
write.csv(gbm_benchmark2, 'shrinkage_0point001_numtrees_32_to_16384_gbm_benchmark_v2.csv')
knitr::opts_chunk$set(echo = TRUE)
prcomp_res <- prcomp(DF)
numeric_DF <- DF %>% select_if(is.numeric, scale)
knitr::opts_chunk$set(echo = TRUE)
echo_flag <- FALSE
library(tidyverse)
attach(mtcars)
plot(wt, mpg)
library(nycflights13)
library(Hmisc)
set.seed(42)
original_data <- read_csv("fltrain.csv.gz")
DF <- original_data
DF[sapply(DF, is.character)] <- lapply(DF[sapply(DF, is.character)],
as.factor)
DF$flight <- as.factor(DF$flight)
str(DF)
library(lubridate)
DF$sched_arr_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_arr_time), 4, pad="0"),format="%H%M")
DF$sched_arr_time_hour <- hour(DF$sched_arr_time_posix)
DF$sched_arr_time_minute <- minute(DF$sched_arr_time_posix)
#num minute is number of minutes since start of day for scheduled arrival time
DF$sched_arr_time_num_minute <- 60*DF$sched_arr_time_hour + DF$sched_arr_time_minute
DF$sched_dep_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_dep_time),4 , pad="0"),format="%H%M")
DF$sched_dep_time_hour <- hour(DF$sched_dep_time_posix)
DF$sched_dep_time_minute <- minute(DF$sched_dep_time_posix)
#num minute is number of minutes since start of day for scheduled depival time
DF$sched_dep_time_num_minute <- 60*DF$sched_dep_time_hour + DF$sched_dep_time_minute
select(original_data, time_hour, sched_dep_time, sched_arr_time, tz, tzone)
select(DF, sched_arr_time, sched_arr_time_hour)
DF$sched_air_time <- DF$sched_arr_time_posix - DF$sched_dep_time_posix
drops <- c('sched_arr_time_posix', 'sched_arr_time_hour', 'sched_dep_time_posix', 'sched_dep_time_hour', 'sched_dep_time', 'sched_arr_time', 'hour', 'time', 'minute', 'time_hour' )
DF <- DF[ , !(names(DF) %in% drops)]
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
DF <- DF[ , !(names(DF) %in% drops)]
DF
## Remove columns with more than 50% NA
DF <- DF[, -which(colMeans(is.na(DF)) > 0.5)]
DF$sched_air_time <- as.numeric(DF$sched_air_time)
library(imputeMissings)
impute_model <- imputeMissings::compute(DF, method="median/mode")
impute_model
DF <- impute(DF, object=impute_model, flag=TRUE)
DF <- DF[!duplicated(as.list(DF))]  #remove all redundant flag columns that are identical to each other.
numeric_only_df <- dplyr::select_if(DF, is.numeric)
library(corrplot)
corrplot(cor(numeric_only_df), type = 'lower')
dep_delay_vec <- DF$dep_delay
DF$dep_delay <- NULL
head(DF)
library(dplyr)
DF <- DF %>% mutate_if(is.numeric, scale)
head(DF)
DF$dep_delay <- dep_delay_vec
knitr::opts_chunk$set(echo = TRUE)
echo_flag <- FALSE
library(tidyverse)
attach(mtcars)
plot(wt, mpg)
library(nycflights13)
library(Hmisc)
set.seed(42)
original_data <- read_csv("fltrain.csv.gz")
DF <- original_data
DF[sapply(DF, is.character)] <- lapply(DF[sapply(DF, is.character)],
as.factor)
DF$flight <- as.factor(DF$flight)
str(DF)
library(lubridate)
DF$sched_arr_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_arr_time), 4, pad="0"),format="%H%M")
DF$sched_arr_time_hour <- hour(DF$sched_arr_time_posix)
DF$sched_arr_time_minute <- minute(DF$sched_arr_time_posix)
#num minute is number of minutes since start of day for scheduled arrival time
DF$sched_arr_time_num_minute <- 60*DF$sched_arr_time_hour + DF$sched_arr_time_minute
DF$sched_dep_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_dep_time),4 , pad="0"),format="%H%M")
DF$sched_dep_time_hour <- hour(DF$sched_dep_time_posix)
DF$sched_dep_time_minute <- minute(DF$sched_dep_time_posix)
#num minute is number of minutes since start of day for scheduled depival time
DF$sched_dep_time_num_minute <- 60*DF$sched_dep_time_hour + DF$sched_dep_time_minute
select(original_data, time_hour, sched_dep_time, sched_arr_time, tz, tzone)
select(DF, sched_arr_time, sched_arr_time_hour)
DF$sched_air_time <- DF$sched_arr_time_posix - DF$sched_dep_time_posix
drops <- c('sched_arr_time_posix', 'sched_arr_time_hour', 'sched_dep_time_posix', 'sched_dep_time_hour', 'sched_dep_time', 'sched_arr_time', 'hour', 'time', 'minute', 'time_hour' )
DF <- DF[ , !(names(DF) %in% drops)]
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
DF <- DF[ , !(names(DF) %in% drops)]
DF
## Remove columns with more than 50% NA
DF <- DF[, -which(colMeans(is.na(DF)) > 0.5)]
DF$sched_air_time <- as.numeric(DF$sched_air_time)
library(imputeMissings)
impute_model <- imputeMissings::compute(DF, method="median/mode")
impute_model
DF <- impute(DF, object=impute_model, flag=TRUE)
DF <- DF[!duplicated(as.list(DF))]  #remove all redundant flag columns that are identical to each other.
numeric_only_df <- dplyr::select_if(DF, is.numeric)
library(corrplot)
corrplot(cor(numeric_only_df), type = 'lower')
dep_delay_vec <- DF$dep_delay
DF$dep_delay <- NULL
head(DF)
library(dplyr)
DF <- DF %>% mutate_if(is.numeric, scale)
head(DF)
DF$dep_delay <- dep_delay_vec
numeric_DF <- DF %>% select_if(is.numeric, scale)
numeric_DF <- dplyr::select_if(DF, is.numeric)
numeric_DF
prcomp_res <- prcomp(numeric_DF)
sdev <- prcomp_res$sdev
prcomp_res
sdev
numeric_DF <- dplyr::select_if(DF, is.numeric) %>%  scale()
numeric_DF
numeric_DF <- dplyr::select_if(DF, is.numeric) %>%  scale()
prcomp_res <- prcomp(numeric_DF)
sdev <- prcomp_res$sdev
prcomp_res
sdev
prcomp_res <- prcomp(numeric_DF)
sdev <- prcomp_res$sdev
prcomp_res <- prcomp(numeric_DF)
sdev <- prcomp_res$sdev
sdev
colSums(prcomp_res$x^2)/sum(USArrests.sc^2)
colSums(prcomp_res$x^2)/sum(numeric_DF^2)
prcomp_res$rotation
rotation <- prcomp_res$rotation
rotation <- prcomp_res$rotation
class(rotation)
rotation <- prcomp_res$rotation
as.data.frame(rotation)
rotation <- as.data.frame(prcomp_res$rotation)
rotation <- as.data.frame(prcomp_res$rotation)
rotation[order(rotation$PC1)]
rotation <- as.data.frame(prcomp_res$rotation)
rotation[order(rotation$PC1),]
rotation <- as.data.frame(prcomp_res$rotation)
rotation[order(rotation$PC1, rotation$PC2),]
rotation <- as.data.frame(prcomp_res$rotation)
rotation[order(abs(rotation$PC1)),]
rotation <- as.data.frame(prcomp_res$rotation)
rotation[-order(abs(rotation$PC1)),]
rotation <- as.data.frame(prcomp_res$rotation)
rotation[order(-abs(rotation$PC1)),]
head(rotation[order(-abs(rotation$PC2)),])

data_df <- data_df[!is.na(data_df$dep_delay), relevant_columns]
hboost <- gbm(dep_delay ~ ., data=data_df,
n.trees=100, shrinkage=0.01) # default shrinkage = 0.1
summary(hboost)
2^6
train <- sample(1:nrow(data_df),size=2*nrow(data_df)/3,replace=FALSE)
train_df <- data_df[train,]
test_df <- data_df[-train,]
nrow(train_df)
head(train_df)
nrow(test_df)
head(test_df)
library(e1071)
#obj <- tune(svm, dep_delay~., data=data_df,
#ranges = list(n.trees = 2^(5:10)),
#tunecontrol = tune.control(sampling = "fix")
#)
#summary(obj)
#plot(obj)
mean(abs(test_df$dep_delay))
mse = mean((test_df$dep_delay-0)^2)
mse
sqrt(mse)
mse = mean((test_df$dep_delay-mean(train_df$dep_delay))^2)
mse
sqrt(mse)
mean(train_df$dep_delay)
drops <- c('dest', 'name', 'manufacturer', 'model', 'tzone', 'engine', 'sched_air_time')
lm_data_df <- data_df[ , !(names(data_df) %in% drops)]
lm_na_omit_df <- imputeMissings:::impute(lm_data_df)
train <- sample(1:nrow(lm_na_omit_df),size=2*nrow(lm_na_omit_df)/3,replace=FALSE)
lm_train_df <- lm_na_omit_df[train,]
lm_test_df <- lm_na_omit_df[-train,]
model <- lm(dep_delay ~ ., data=lm_train_df)
summary <- round(summary(model)$coefficients,6)
sorteddf <- summary[order(summary[,ncol(summary)]),]
#sorteddf
preds = predict(model, newdata=lm_test_df)
mse = mean((lm_test_df$dep_delay - preds)^2)
mse
sqrt(mse)
#summary(model)
mse = mean((lm_test_df$dep_delay-mean(lm_test_df$dep_delay))^2)
mse
sqrt(mse)
drops <- c('dest', 'name', 'manufacturer', 'model', 'tzone', 'engine', 'sched_air_time')
lm_data_df <- data_df[ , !(names(data_df) %in% drops)]
lm_na_omit_df <- imputeMissings::impute(lm_data_df, method = 'median/mode', flag=TRUE)
train <- sample(1:nrow(lm_na_omit_df),size=2*nrow(lm_na_omit_df)/3,replace=FALSE)
lm_train_df <- lm_na_omit_df[train,]
lm_test_df <- lm_na_omit_df[-train,]
model <- lm(dep_delay ~ ., data=lm_train_df)
summary <- round(summary(model)$coefficients,6)
sorteddf <- summary[order(summary[,ncol(summary)]),]
#sorteddf
preds = predict(model, newdata=lm_test_df)
mse = mean((lm_test_df$dep_delay - preds)^2)
mse
sqrt(mse)
#summary(model)
hboost <- gbm(dep_delay ~ ., data=lm_train_df,
n.trees=1000, shrinkage=0.01)
preds = predict(hboost, n.trees = 1000, newdata=lm_test_df)
mse = mean((lm_test_df$dep_delay - preds)^2)
mse
sqrt(mse)
hboost <- gbm(dep_delay ~ ., data=lm_train_df,
n.trees=100, shrinkage=0.1)
preds = predict(hboost, n.trees = 100, newdata=lm_test_df)
mse = mean((lm_test_df$dep_delay - preds)^2)
mse
sqrt(mse)
hboost <- gbm(dep_delay ~ ., data=lm_train_df,
n.trees=100, distribution='gaussian', shrinkage=0.2)
preds = predict(hboost, n.trees = 100, newdata=lm_test_df)
mse = mean((lm_test_df$dep_delay - preds)^2)
mse
sqrt(mse)
hboost <- gbm(dep_delay ~ ., data=lm_train_df,
n.trees=100, distribution='gaussian', shrinkage=0.2)
preds = predict(hboost, n.trees = 100, newdata=lm_test_df)
mse = mean((lm_test_df$dep_delay - preds)^2)
mse
sqrt(mse)
set.seed(42)
x <- 2^seq(5,14, by=1)
mse_vec <- numeric(length(x))
count <- 1
for (val in x) {
hboost <- gbm(
dep_delay ~ .,
data = lm_train_df,
n.trees = val,
distribution = 'gaussian',
shrinkage = 0.01
)
preds = predict(hboost, n.trees = val, newdata = lm_test_df)
mse = mean((lm_test_df$dep_delay - preds) ^ 2)
mse
sqrt(mse)
mse_vec[count] <- mse
print(val)
print(mse)
count = count + 1
}
help(flights)
head(flights)
View(flights)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
# when the test data are made available:
# fltest <- read_csv("fltest.csv.gz")
library(tidyverse)
library(nycflights13)
set.seed(42)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
# when the test data are made available:
# fltest <- read_csv("fltest.csv.gz")
library(tidyverse)
library(nycflights13)
set.seed(42)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
class(fltrain)
fltrain['sched_air_time'] <- fltrain['sched_arr_time']-fltrain['sched_dep_time']
#drops <- c("dep_time", "arr_time", "air_time", "arr_delay", 'sched_arr_time')
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
fltrain <- fltrain[ , !(names(fltrain) %in% drops)]
fltrain
data_df <- fltrain
nrow(data_df)
library(dplyr)
non_extreme_delay_subset <- data_df[data_df$dep_delay < 30,]
non_extreme_delay_subset
hist(non_extreme_delay_subset$dep_delay)
nrow(non_extreme_delay_subset)
data_df <- non_extreme_delay_subset
dep_delay_vec <- data_df$dep_delay
data_df$dep_delay <- NULL
head(data_df)
scale(data_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
# when the test data are made available:
# fltest <- read_csv("fltest.csv.gz")
library(tidyverse)
library(nycflights13)
set.seed(42)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
class(fltrain)
fltrain['sched_air_time'] <- fltrain['sched_arr_time']-fltrain['sched_dep_time']
#drops <- c("dep_time", "arr_time", "air_time", "arr_delay", 'sched_arr_time')
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
fltrain <- fltrain[ , !(names(fltrain) %in% drops)]
fltrain
data_df <- fltrain
nrow(data_df)
library(dplyr)
non_extreme_delay_subset <- data_df[data_df$dep_delay < 30,]
non_extreme_delay_subset
hist(non_extreme_delay_subset$dep_delay)
nrow(non_extreme_delay_subset)
data_df <- non_extreme_delay_subset
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
# when the test data are made available:
# fltest <- read_csv("fltest.csv.gz")
library(tidyverse)
library(nycflights13)
set.seed(42)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
class(fltrain)
fltrain['sched_air_time'] <- fltrain['sched_arr_time']-fltrain['sched_dep_time']
#drops <- c("dep_time", "arr_time", "air_time", "arr_delay", 'sched_arr_time')
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
fltrain <- fltrain[ , !(names(fltrain) %in% drops)]
fltrain
data_df <- fltrain
nrow(data_df)
library(dplyr)
non_extreme_delay_subset <- data_df[data_df$dep_delay < 30,]
non_extreme_delay_subset
hist(non_extreme_delay_subset$dep_delay)
nrow(non_extreme_delay_subset)
data_df <- non_extreme_delay_subset
dep_delay_vec <- data_df$dep_delay
data_df$dep_delay <- NULL
head(data_df)
scale(data_df)
?scale
dep_delay_vec <- data_df$dep_delay
data_df$dep_delay <- NULL
head(data_df)
library(dplyr)
data_df %>% mutate_if(is.numeric, scale)
head(data_df)
dep_delay_vec <- data_df$dep_delay
data_df$dep_delay <- NULL
head(data_df)
library(dplyr)
data_df %>% mutate_if(is.numeric, scale)
head(data_df)
data_df$dep_delay <- dep_delay_vec
head(data_df)
dep_delay_vec <- data_df$dep_delay
data_df$dep_delay <- NULL
head(data_df)
library(dplyr)
data_df <- data_df %>% mutate_if(is.numeric, scale)
head(data_df)
data_df$dep_delay <- dep_delay_vec
head(data_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
# when the test data are made available:
# fltest <- read_csv("fltest.csv.gz")
library(tidyverse)
library(nycflights13)
set.seed(42)
#help(flights)
#help(weather)
#help(airports)
#help(planes)
fltrain <- read_csv("fltrain.csv.gz")
class(fltrain)
fltrain['sched_air_time'] <- fltrain['sched_arr_time']-fltrain['sched_dep_time']
#drops <- c("dep_time", "arr_time", "air_time", "arr_delay", 'sched_arr_time')
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
fltrain <- fltrain[ , !(names(fltrain) %in% drops)]
fltrain
data_df <- fltrain
nrow(data_df)
library(dplyr)
non_extreme_delay_subset <- data_df[data_df$dep_delay < 30,]
non_extreme_delay_subset
hist(non_extreme_delay_subset$dep_delay)
nrow(non_extreme_delay_subset)
data_df <- non_extreme_delay_subset
dep_delay_vec <- data_df$dep_delay
data_df$dep_delay <- NULL
head(data_df)
library(dplyr)
data_df <- data_df %>% mutate_if(is.numeric, scale)
head(data_df)
data_df$dep_delay <- dep_delay_vec
head(data_df)
"dep_delay~month+day+sched_dep_time+sched_arr_time+carrier+flight+origin+dest+distance+hour+minute+time_hour+temp+dewp+humid+wind_dir+wind_speed+wind_gust+precip+pressure+visib+name+lat+lon+alt+tz+dst+tzone+year.y+type+manufacturer+model+engines+seats+speed+engine+sched_air_time"
full_model <- lm(dep_delay~month+day+sched_dep_time+sched_arr_time+carrier+flight , data=data_df)
summary <- round(summary(full_model)$coefficients,6)
sorteddf <- summary[order(summary[,ncol(summary)]),]
sorteddf
summary
set.seed(21)
vector <- character(length(colnames(data_df)))
vector <- c(0)
# drop dep_delay from features because it is reponse
# drop tailnum because it produces too many columns
drops <- c("dep_delay")
drops <- append(drops, 'speed')
drops
#dropping speed because it has too many NA's.
x_features <- data_df[ , !(names(data_df) %in% drops)]
print(x_features)
full_formula_vec <- c(length(colnames(x_features)))
for (i in 1:length(colnames(x_features)))
{
vector[i] <- colnames(x_features)[i]
formula <- paste0(vector, sep="", collapse="+")
full_formula <- paste0(c('dep_delay', formula), sep="", collapse="~")
full_formula_vec[i] <- full_formula
}
full_formula_vec[length(full_formula_vec)]
length(full_formula_vec)
full_formula_vec[35]
x_features[35]
head(data_df)
full_model <- lm(full_formula_vec[length(full_formula_vec)] , data=data_df)
summary <- round(summary(full_model)$coefficients,6)
sorted_df <- summary[order(summary[,ncol(summary)]),]
head(sorted_df)
help(weather)
first_formula <- full_formula_vec[length(full_formula_vec)]
first_formula
library(gbm)
?gbm
colnames(data_df)
relevant_columns <- append(colnames(x_features), "dep_delay")
relevant_columns
relevant_columns <- relevant_columns[!relevant_columns %in% c('time_hour', 'sched_dep_time')]
relevant_columns
data_df_cols <- colnames(data_df)
data_df_cols
setdiff(data_df_cols, relevant_columns)
data_df[sapply(data_df, is.character)] <- lapply(data_df[sapply(data_df, is.character)],
as.factor)
str(data_df)
head(data_df)
View(data_df)
set.seed(42)
data_df <- data_df[!is.na(data_df$dep_delay), relevant_columns]
hboost <- gbm(dep_delay ~ ., data=data_df,
n.trees=100, shrinkage=0.01) # default shrinkage = 0.1
summary(hboost)
2^6
train <- sample(1:nrow(data_df),size=2*nrow(data_df)/3,replace=FALSE)
train_df <- data_df[train,]
test_df <- data_df[-train,]
nrow(train_df)
head(train_df)
nrow(test_df)
head(test_df)
library(e1071)
#obj <- tune(svm, dep_delay~., data=data_df,
#ranges = list(n.trees = 2^(5:10)),
#tunecontrol = tune.control(sampling = "fix")
#)
#summary(obj)
#plot(obj)
mean(abs(test_df$dep_delay))
mse = mean((test_df$dep_delay-0)^2)
mse
sqrt(mse)
mse = mean((test_df$dep_delay-mean(train_df$dep_delay))^2)
mse
sqrt(mse)
mean(train_df$dep_delay)
drops <- c('dest', 'name', 'manufacturer', 'model', 'tzone', 'engine', 'sched_air_time')
lm_data_df <- data_df[ , !(names(data_df) %in% drops)]
lm_na_omit_df <- imputeMissings:::impute(lm_data_df)
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
library(Hmisc)
set.seed(42)
original_data <- read_csv("fltrain.csv.gz")
DF <- original_data
DF[sapply(DF, is.character)] <- lapply(DF[sapply(DF, is.character)],
as.factor)
DF$flight <- as.factor(DF$flight)
str(DF)
library(lubridate)
DF$sched_arr_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_arr_time), 4, pad="0"),format="%H%M")
DF$sched_arr_time_hour <- hour(DF$sched_arr_time_posix)
DF$sched_arr_time_minute <- minute(DF$sched_arr_time_posix)
#num minute is number of minutes since start of day for scheduled arrival time
DF$sched_arr_time_num_minute <- 60*DF$sched_arr_time_hour + DF$sched_arr_time_minute
DF$sched_dep_time_posix <- as.POSIXct(str_pad(as.character(DF$sched_dep_time),4 , pad="0"),format="%H%M")
DF$sched_dep_time_hour <- hour(DF$sched_dep_time_posix)
DF$sched_dep_time_minute <- minute(DF$sched_dep_time_posix)
#num minute is number of minutes since start of day for scheduled depival time
DF$sched_dep_time_num_minute <- 60*DF$sched_dep_time_hour + DF$sched_dep_time_minute
select(original_data, time_hour, sched_dep_time, sched_arr_time, tz, tzone)
select(DF, sched_arr_time, sched_arr_time_hour)
DF$sched_air_time <- DF$sched_arr_time_posix - DF$sched_dep_time_posix
drops <- c('sched_arr_time_posix', 'sched_arr_time_hour', 'sched_dep_time_posix', 'sched_dep_time_hour', 'sched_dep_time', 'sched_arr_time', 'hour', 'time', 'minute', 'time_hour' )
DF <- DF[ , !(names(DF) %in% drops)]
drops <- c("dep_time", "arr_time", "air_time", "arr_delay", "year.x", 'tailnum')
DF <- DF[ , !(names(DF) %in% drops)]
DF
## Remove columns with more than 50% NA
DF <- DF[, -which(colMeans(is.na(DF)) > 0.5)]
DF$sched_air_time <- as.numeric(DF$sched_air_time)
library(imputeMissings)
impute_model <- imputeMissings::compute(DF, method="median/mode", flag=TRUE)
impute_model
DF <- impute(DF, object=impute_model)
numeric_only_df <- dplyr::select_if(DF, is.numeric)
library(corrplot)
corrplot(cor(numeric_only_df), type = 'lower')
dep_delay_vec <- DF$dep_delay
DF$dep_delay <- NULL
head(DF)
library(dplyr)
DF <- DF %>% mutate_if(is.numeric, scale)
head(DF)
DF$dep_delay <- dep_delay_vec
DF<-DF[DF$dep_delay < 30,]
set.seed(42)
DF$flight <- NULL
train_index <- sample(1:nrow(DF),size=2*nrow(DF)/3,replace=FALSE)
train_df <- DF[train_index,]
test_df <- DF[-train_index,]
rmse = mean((test_df$dep_delay-0)^2) %>% sqrt()
rmse
rmse = mean((test_df$dep_delay-mean(train_df$dep_delay))^2)%>% sqrt()
rmse
rmse = mean((test_df$dep_delay-median(train_df$dep_delay))^2)%>% sqrt()
rmse
model <- lm(dep_delay ~ .-model, data=train_df)
summary <- round(summary(model)$coefficients,6)
sorteddf <- summary[order(summary[,ncol(summary)]),]
head(sorteddf)
lm_test_df <- test_df
in_test_but_not_train <- setdiff(unique(lm_test_df$model), unique(train_df$model))
lm_test_df <- lm_test_df[ !lm_test_df$model %in% in_test_but_not_train, ]
in_test_but_not_train <- setdiff(unique(lm_test_df$dest), unique(train_df$dest))
lm_test_df <- lm_test_df[ !lm_test_df$dest %in% in_test_but_not_train, ]
preds = predict(model, newdata=lm_test_df)
rmse = sqrt(mean((lm_test_df$dep_delay - preds)^2))
rmse
set.seed(42)
library(gbm)
model <- gbm(dep_delay ~ ., data=train_df,
n.trees=100, shrinkage=0.1) # default shrinkage = 0.1
preds = predict(model, newdata=test_df, n.trees=100)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
summary(model)
model <- gbm(dep_delay ~ ., data=train_df,
n.trees=1000, shrinkage=0.01) # default shrinkage = 0.1
preds = predict(model, newdata=test_df, n.trees=100)
rmse = sqrt(mean((test_df$dep_delay - preds)^2))
rmse
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
USArrests <- scale(USArrests,scale=FALSE)
USArrests.sc <- scale(USArrests,scale=TRUE)
prcomp_res <- prcomp(USArrests.sc)
prcomp_res
sdev <- prcomp_res$sdev
sdev
sdev
sdev^2/4
sum(sdev^2)/4
sdev
sdev^2
prcomp_res
head(prcomp_res$x)
(sum(prcomp_res$x[,1]^2)+sum(prcomp_res$x[,2]^2)+sum(prcomp_res$x[,3]^2)+sum(prcomp_res$x[,4]^2))/sum(USArrests.sc^2)
sum(prcomp_res$x[,1]^2)/sum(USArrests.sc^2)
sum(prcomp_res$x[,2]^2)/sum(USArrests.sc^2)
sum(prcomp_res$x[,3]^2)/sum(USArrests.sc^2)
sum(prcomp_res$x[,4]^2)/sum(USArrests.sc^2)
prcomp_res
t(USArrests.sc)
class(USArrests.sc)
USArrests.sc
head(USArrests.sc)
hc.complete<- hclust(dist(USArrests, method='euclidean'), method='complete')
plot(hc.complete,cex=.5)
treecut <- cutree(hc.complete , 3)
plot(treecut, cex=.5)
treecut
class(treecut)
names(treecut)
cut_df <- data.frame(state=names(treecut), cluster=treecut)
cut_df
describe(cut_df$cluster)
cut_df[cut_df$cluster==1,]
cut_df[cut_df$cluster==2,]
cut_df[cut_df$cluster==3,]
hc.complete<- hclust(dist(USArrests, method='euclidean'), method='complete')
plot(hc.complete,cex=.5, main="before scaling")
hc.after_scaling.complete<- hclust(dist(USArrests.sc, method='euclidean'), method='complete')
plot(hc.after_scaling.complete,cex=.5, main="after scaling")
treecut <- cutree(hc.after_scaling.complete , 3)
plot(treecut, cex=.5)
treecut
cut_df <- data.frame(state=names(treecut), cluster=treecut)
cut_df
describe(cut_df$cluster)
str(prcomp_res)
sum(prcomp_res$x[,1]^2)/sum(USArrests.sc^2)
